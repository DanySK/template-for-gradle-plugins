name: CI
on:
  push:
    tags: '*'
    branches-ignore:
      - 'autodelivery**'
      - 'bump-**'
      - 'renovate/**'
  pull_request:
  schedule:
    - cron: '0 3 * * SUN'

jobs:
  Build:
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        distribution: [adopt]
    runs-on: ${{ matrix.os }}-latest
    env:
      OS: ${{ matrix.os }}
      TERM: dumb
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Fetch tags
        shell: bash
        run: git fetch --tags -f
      - name: Populate TAG and BRANCH environment variables
        shell: bash
        run: |
          TAG=$(git describe --tags --exact-match HEAD || echo '')
          echo "Current tag is: '$TAG' (setup in the TAG environment variable)"
          echo "TAG=$TAG" >> $GITHUB_ENV
          BRANCH=$([ -z "$TAG" ] && echo ${GITHUB_REF#refs/heads/} || echo $TAG)
          echo "Current tag is: '$BRANCH' (setup in BRANCH TAG environment variable)"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      # Install the JDK
      - uses: actions/setup-java@v2
        with:
          distribution: ${{ matrix.distribution }}
          java-version: 16
          server-id: ossrh
          server-username: MAVEN_CENTRAL_USERNAME
          server-password: MAVEN_CENTRAL_PASSWORD
          gpg-private-key: ${{ secrets.SIGNING_KEY }}
          gpg-passphrase: SIGNING_PASSWORD
      - name: Configure the Windows Pagefile
        if: ${{ runner.os == 'Windows' }}
        uses: al-cheb/configure-pagefile-action@v1.2
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build
        shell: bash
        run: .github/build-steps/build.sh || .github/build-steps/build.sh
      - name: Check
        if: false
        shell: bash
        run: .github/build-steps/check.sh || .github/build-steps/check.sh
      - name: CodeCov
        if: ${{ runner.os == 'Linux' }}
        uses: codecov/codecov-action@v1
      - name: Deploy
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          githubToken: ${{ secrets.AUTOMERGE_TOKEN }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_CENTRAL_USERNAME: danysk
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        run: .github/build-steps/deploy.sh || .github/build-steps/deploy.sh
      - name: Turn off the Gradle Daemon
        shell: bash
        run: ./gradlew --stop
      - name: Kill every Java process on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          handle %HOME%\.gradle\caches\modules-2\modules-2.lock
      - name: Cleanup Gradle Cache
        shell: bash
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  Build-Success:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - shell: bash
        run: touch ok
      - uses: actions/upload-artifact@v2
        with:
          name: success
          path: ok
  CI-Complete:
    needs: Build-Success
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: success
      - shell: bash
        run: '[ -f ok ]'
  Automerge:
    needs: CI-Complete
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: automerge
        uses: "DanySK/yaagha@0.1.2"
        env:
          GITHUB_TOKEN: "${{ secrets.AUTOMERGE_TOKEN }}"
          MERGE_FORKS: "false"
          MERGE_LABELS: "version-upgrade"
          BLOCK_LABELS: "blocked, wontfix, invalid"
          MERGE_METHOD: "rebase"
          CLOSE_ON_CONFLICT: "true"
          DELETE_BRANCH_ON_CLOSE: "true"
          GIT_USER_NAME: "Danilo Pianini"
          GIT_USER_EMAIL: "danilo.pianini@gmail.com"
